{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>","title":"Prodigy X"},{"location":"#prodigy-x","text":"<p></p> <p>Prodigy X is a cheat menu for the game Prodigy.</p> <p>To use Prodigy X, go to our installing page.</p> <p>For more help visit our discord server. </p>  <p>Always use an alt, just to be safe.</p> <p>While our hacks are completely safe, you should never use hacks on your main account. There's an extremely slim chance that you could get banned for using hacks. If you do get banned, please report it.</p>","title":"Prodigy X"},{"location":"creating-bookmarks/","text":"<p>To use Prodigy X, you must create a bookmark.</p> <p>If you don't know how to create a bookmark, this page will teach you how to.</p>","title":"Creating Bookmarks"},{"location":"creating-bookmarks/#firefox","text":"<ol> <li>To create a bookmark on firefox you need to open the bookmarks bar. You can do this by pressing Ctrl+B.</li> <li>Now right click on the Bookmarks Toolbar folder and select Add Bookmark.       </li> <li>Now you will be able to create a bookmark.       </li> </ol>","title":"Firefox"},{"location":"creating-bookmarks/#chrome","text":"<ol> <li>Make the bookmark bar visible. If it is not visible you can make it visible by press Ctrl+Shift+B.</li> <li>Right click the bookmark bar and select Add Page.       </li> <li>Now you will be able to create a bookmark.       </li> </ol>","title":"Chrome"},{"location":"installing/","text":"<p>There are 2 different methods of installing Prodigy X.</p>","title":"Installing Prodigy X"},{"location":"installing/#extension-method-webstore-only-works-on-chrome-but-easier","text":"<p>The extension method is the easiest way to install Prodigy X.</p> <ol> <li>Go to https://chrome.google.com/webstore/detail/prodigy-x-loader/eajlgdnpohfeclpikjpnhadfkboknaop?pli=1</li> <li>Click <code>Add To Chrome</code>.</li> <li>Now click <code>Add Extension</code></li> </ol> <p>Now when you log onto Prodigy, Prodigy X will automatically get loaded!</p> <p>Here's a video to show you how to do it! </p>","title":"Extension Method Webstore (only works on Chrome, but easier)"},{"location":"installing/#extension-method-manual-only-works-on-chrome-but-easier","text":"<p>The extension method is the easiest way to install Prodigy X.</p> <ol> <li>Firstly you have to get on the extensions page. You can access this page by going to chrome://extensions/ in chrome.</li> <li>Now on the extensions page, you will have to enable Developer Mode. On the top right corner of the page, you will see a switch. Make sure it is enabled.    </li> <li>Now download the extension. You can do that here.</li> <li>The only thing you have to do now is to install the extension. You can do that by dragging and dropping the extension onto the extensions page.</li> </ol> <p>Now when you log onto Prodigy, Prodigy X will automatically get loaded!</p> <p>Here's a video to show you how to do it! </p>","title":"Extension Method Manual (only works on Chrome, but easier)"},{"location":"installing/#bookmarklet-method-works-on-all-browsers-and-devices-but-requires-a-few-extra-steps","text":"<ol> <li>Firstly you will need to copy the Prodigy X bookmarklet.    Click here to copy it!    If the button did not work you can copy it from the following link: https://raw.githubusercontent.com/ProdigyAPI/ProdigyX/master/bookmarklet.txt. Secondly, you will need to create a new bookmark.</li> <li>Name the bookmark Prodigy X.</li> <li>In the URL of the bookmark paste the contents of bookmarklet.txt.</li> <li>Save the bookmark</li> </ol> <p>Now when you go on the Prodigy website you will be able to use Prodigy X. Just click on the Prodigy X bookmark.</p> <p>It is recommended to make the bookmark bar visible.</p> <p>Here's a video to show you how to do it! </p>","title":"Bookmarklet Method (works on all browsers and devices, but requires a few extra steps)"},{"location":"contributing/alerts/","text":"<p>Prodigy X uses sweetalert2 to create alerts.</p>","title":"Creating Alerts"},{"location":"contributing/alerts/#inputs","text":"<p>Prodigy X comes with custom functions for creating inputs.</p>","title":"Inputs"},{"location":"contributing/alerts/#string","text":"<p>The <code>InputTypes.string</code> function is used to ask the user for a string. It accepts a <code>value</code> parameter which is the text that will be shown to the user.</p> <p>This returns a promise that resolves to the value the user entered as a string.</p>  <p>Example</p> <p>An example of how to use the <code>InputTypes.string</code> function. In this example, the user will receive a prompt to enter their name.</p> <pre><code>await InputTypes.string(\"Please enter the name of the player.\")\n</code></pre>","title":"String"},{"location":"contributing/alerts/#integer","text":"<p>The <code>InputTypes.integer</code> function is used to ask the user for an integer. The first parameter it accepts is a <code>value</code> this is the text that will be shown to the user. It also accepts <code>min</code> and <code>max</code> parameters which are the minimum and maximum values the user can enter. The minimum value defaults to <code>0</code> and the maximum value defaults to <code>Infinity</code>.</p>  <p>Example</p> <p>An example of how to use the <code>InputTypes.integer</code> function. In this example, the user will receive a prompt to enter their level.</p> <p><pre><code>await InputTypes.integer(\"Please enter your level.\")\n</code></pre> But in prodigy, the level has to be between 1 and 100. So this works better:</p> <pre><code>await InputTypes.integer(\"Please enter your level.\", 1, 100)\n</code></pre>","title":"Integer"},{"location":"contributing/alerts/#float","text":"<p>The <code>InputTypes.float</code> function is used to ask the user for a float. The first parameter it accepts is a <code>value</code> this is the text that will be shown to the user.</p>","title":"Float"},{"location":"contributing/alerts/#select","text":"<p>The <code>InputTypes.select</code> function is used to ask the user for a select. The first parameter it accepts is a <code>value</code> this is the text that will be shown to the user. The second parameter is an array of options.</p>","title":"Select"},{"location":"contributing/alerts/#response-alerts","text":"<p>The response alerts are used to show the user a message.</p> <ul> <li>success: A success message.</li> <li>error: An error message.</li> <li> <p>confirm: A confirm message.</p>  <p>Example</p> <p>An example of how to use the response alerts.</p> <pre><code>success(\"You have successfully logged in.\")\n</code></pre>  </li> </ul> <p>You can also use <code>customMessage</code>. This accepts the same parameters as sweetalert2's fire function. If the <code>html</code> option is a JSX element it will be converted to an HTML object.</p>","title":"Response Alerts"},{"location":"contributing/creating-hacks/","text":"<p>To create hacks for Prodigy X you have to use the extension method.</p> <p>Firstly pick the category you want to create a hack for. Currently, the categories are:</p> <ul> <li>Battle</li> <li>Inventory</li> <li>Pet</li> <li>Player</li> <li>Utility</li> </ul> <p>Once you picked the category, go into that category file.</p> <p>In the scope of <code>withCategory</code> you can use the <code>hack</code> and <code>toggle</code> functions.</p>","title":"Creating Hacks"},{"location":"contributing/creating-hacks/#hack-function","text":"<p>The hack function is used to create a hack as a button.</p> <p>To create a hack you will need a name, a description and a function.</p> <p>The function accepts 3 parameters:</p> <ul> <li>hack: The game object. On the extension, this is equal to <code>_.game</code>.</li> <li>player: The player object. On the extension, this is equal to <code>_.player</code>.</li> <li>gameData: Data about the game. On the extension, this is equal to <code>_.gameData</code>.</li> </ul>  <p>Example</p> <p>The example below shows how the hack <code>Set Gold</code> was created.</p> src/hacks/player.tsx<pre><code>hack(\"Set Gold\", \"Set's the amount of gold you have currently.\", async (hack, player) =&gt; { // (1)!\n    const value = await InputTypes.integer(\"Please enter the amount of gold you want to get.\", 1, 9999999) // (2)!\n    player.data.gold = value // (3)!\n    success(`You now have ${value} gold.`) // (4)!\n})\n</code></pre> <ol> <li>Initialize the hack.</li> <li>Ask the user for the amount of gold. Reference the alerts page for more information.</li> <li>Set the amount of gold.</li> <li>Alert the user that the amount of gold has been set. Reference the alerts page for more information.</li> </ol>  <p>The hack function also accepts an <code>extensionOnly</code> parameter.</p>  <p>Example</p> <p>The example below shows how to make a <code>Set Gold</code> hack only available on the extension.</p> src/hacks/player.tsx<pre><code>hack(\"Set Gold\", \"Set's the amount of gold you have currently.\", async (hack, player) =&gt; {\n    const value = await InputTypes.integer(\"Please enter the amount of gold you want to get.\", 1, 9999999)\n    player.data.gold = value\n    success(`You now have ${value} gold.`)\n}, true) // (1)!\n</code></pre> <ol> <li>Tell the cheat menu to only load this hack on the extension build.</li> </ol>","title":"Hack Function"},{"location":"contributing/creating-hacks/#toggle-function","text":"<p>The toggle function is used to create a hack, with an enabled and disabled state.</p> <p>To create a toggler you will need a name, a function, and a get default value function.</p> <p>The function accepts 4 parameters:</p> <ul> <li>hack: The game object. On the extension, this is equal to <code>_.game</code>.</li> <li>player: The player object. On the extension, this is equal to <code>_.player</code>.</li> <li>gameData: Data about the game. On the extension, this is equal to <code>_.gameData</code>.</li> <li>toggleState: The current state of the toggler.</li> </ul> <p>The get default value function accepts 2 parameters:</p> <ul> <li>hack: The game object. On the extension, this is equal to <code>_.game</code>.</li> <li>player: The player object. On the extension, this is equal to <code>_.player</code>.</li> </ul>  <p>Example</p> <p>The example below shows how the toggler <code>Instant Kill</code> was created.</p> src/hacks/battle.tsx<pre><code>toggle(\"Instant Kill\", (hack, player, gameData, toggled) =&gt; { // (1)!\n    player.modifiers.damage = toggled ? 1e9 : 1 // (2)!\n    success(toggled ? \"You will now kill everything after one attack.\" : \"You will no longer kill everything after one attack.\") // (3)!\n}, (hack, player) =&gt; player.modifiers.damage === 1e9) // (4)!\n</code></pre> <ol> <li>Initialize the toggler.</li> <li>Change the damage multiplier depending on whether the toggler was toggled or not.</li> <li>Alert the user that the damage multiplier has been changed. Reference the alerts page for more information.</li> <li>If the damage modifier is already set to 1e9, make the toggler toggled.</li> </ol>  <p>The toggle function also accepts an <code>extensionOnly</code> parameter.</p>","title":"Toggle Function"}]}